#ifndef ECENGINE_H
#define ECENGINE_H

#include <QObject>
#include "EmoStateDLL.h"
#include "edk.h"
#include "edkErrorCode.h"
#include "spppinclude/vector.h"
#include "complex.h"
#include <QTimer>
using namespace std;
using namespace splab;

#define SAMPLETIMEMS 1000

class ECEngine : public QObject
{
    Q_OBJECT
public:
    explicit ECEngine(QObject *parent = 0);
    ~ECEngine();
    void start();
    void initEngine();

signals:

public slots:


private:
    int                 batteryLevel, maxBatteryLevel;//ES_GetBatteryChargeLevel()
    int                 headsetOn;//ES_GetHeadsetOn()
    EE_SignalStrength_t wirelessSignalStatus;//ES_GetWirelessSignalStatus()
    qint32              contactQuality[20];//ES_GetContactQualityFromAllChannels()

    EmoEngineEventHandle eEvent;//EE_EmoEngineEventCreate()
    EmoStateHandle      eState;//EE_EmoStateCreate() and EE_EngineGetNextEvent()
    DataHandle          hData;//EE_DataCreate()
    EE_Event_t          eventType;//EE_EmoEngineEventGetType(eEvent);
    unsigned int        userID;//EE_DataAcquisitionEnable(userID,true);    see example 11
    float               secs;
    unsigned int        datarate;
    bool                readyToCollect;
    unsigned int        nSamplesTaken;                                     //see example 11
    bool                userAdded;
    double *            bufferHead[16];
    double  bufferAF3[520],bufferF7[520],bufferF3[520],bufferFC5[520],bufferT7[520],bufferP7[520],bufferO1[520],
            bufferAF4[520],bufferF8[520],bufferF4[520],bufferFC6[520],bufferT8[520],bufferP8[520],bufferO2[520];
    Vector<double>      rawBuffer_AF3;
    Vector<complex<double> >  fft_AF3;
    Vector<double>      rawBuffer_F7;
    Vector<complex<double> >  fft_F7;
    Vector<double>      rawBuffer_F3;
    Vector<complex<double> >  fft_F3;
    Vector<double>      rawBuffer_FC5;
    Vector<complex<double> >  fft_FC5;
    Vector<double>      rawBuffer_T7;
    Vector<complex<double> >  fft_T7;
    Vector<double>      rawBuffer_P7;
    Vector<complex<double> >  fft_P7;
    Vector<double>      rawBuffer_O1;
    Vector<complex<double> >  fft_O1;
    Vector<double>      rawBuffer_O2;
    Vector<complex<double> >  fft_O2;
    Vector<double>      rawBuffer_P8;
    Vector<complex<double> >  fft_P8;
    Vector<double>      rawBuffer_T8;
    Vector<complex<double> >  fft_T8;
    Vector<double>      rawBuffer_FC6;
    Vector<complex<double> >  fft_FC6;
    Vector<double>      rawBuffer_F4;
    Vector<complex<double> >  fft_F4;
    Vector<double>      rawBuffer_F8;
    Vector<complex<double> >  fft_F8;
    Vector<double>      rawBuffer_AF4;
    Vector<complex<double> >  fft_AF4;
    
    

    //EE_DataChannel_t    targetChannelList[16];



};

#endif // ECENGINE_H
